generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  userAuthToken String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roleId        Int
  Material         Material[]
  role          Role     @relation(fields: [roleId], references: [roleId])

  @@index([roleId], map: "User_roleId_fkey")
}

model Role {
  roleId    Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Answer {
  answerId   String   @id @default(uuid())
  answer     String   @db.VarChar(1024)
  correct    Boolean  @default(true)
  questionId String
  question   Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade, onUpdate: NoAction, map: "Answer_Question")

  @@index([questionId], map: "Answer_Question")
}

model Genre {
  genreId    Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  GenreMaterial GenreMaterial[]
}

model GenreMaterial {
  genreId Int
  materialId String
  Genre   Genre  @relation(fields: [genreId], references: [genreId], onDelete: Cascade, onUpdate: NoAction, map: "Genre_Material_Genre")
  Material   Material  @relation(fields: [materialId], references: [materialId], onDelete: Cascade, onUpdate: NoAction, map: "Genre_Material_Material")

  @@id([genreId, materialId])
  @@index([materialId], map: "Genre_Material_Material")
}

model Question {
  questionId String   @id @default(uuid())
  question   String   @db.VarChar(1024)
  materialId    String
  Answer     Answer[]
  Material      Material    @relation(fields: [materialId], references: [materialId], onDelete: Cascade , onUpdate: NoAction, map: "Question_Material")

  @@index([materialId], map: "Question_Material")
}

model Material {
  materialId     String       @id @default(uuid())
  title       String       @db.VarChar(255)
  description String       @db.VarChar(4096)
  public      Boolean      @default(false)
  featured    Boolean      @default(false)
  image       Bytes?        @db.MediumBlob
  imageName  String?       @db.VarChar(255)
  imageType  String?       @db.VarChar(255)
  source      Bytes?        @db.MediumBlob
  sourceName String?       @db.VarChar(255)
  sourceType String?       @db.VarChar(255)
  userId      String
  GenreMaterial  GenreMaterial[]
  Question    Question[]
  User        User         @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "Material_User")

  @@index([userId], map: "Material_User")
}
